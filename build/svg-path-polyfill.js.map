{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./node_modules/svg-path-properties/build/path-properties.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA,WAAW,mBAAO,CAAC,CAAqB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY;AACZ;AACA,C;;;;;;AChEA;AACA;AACA,CAAC,KAA4D;AAC7D,CAAC,SAC4B;AAC7B,CAAC,4BAA4B;;AAE7B;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;;AAEb;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,MAAM;AACN,kBAAkB;AAClB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,MAAM;AACN,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uDAAuD;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,YAAY;AAC9C,4DAA4D,YAAY;AACxE,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;;;AAGA,IAAI;;AAEJ;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,0CAA0C,sBAAsB;AAChE;AACA;AACA,QAAQ,uBAAuB;AAC/B;;AAEA,aAAa;;AAEb,IAAI;AACJ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA,YAAY,uBAAuB;AACnC;;AAEA,iBAAiB;;AAEjB,IAAI;AACJ;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ,gCAAgC;AACxC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,0DAA0D;AAC1D,6DAA6D;AAC7D,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,+CAA+C,cAAc;;AAE7D,CAAC","file":"svg-path-polyfill.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var path = require(\"svg-path-properties\");\n\n/**\n * Creates a simple SVG with a path\n */\nfunction createSimpleSVGWithPath() {\n    var xmlns = \"http://www.w3.org/2000/svg\";\n    var svgElem = document.createElementNS(xmlns, \"svg\");\n    svgElem.setAttributeNS (null, \"width\", 100);\n    svgElem.setAttributeNS (null, \"height\", 100);\n    svgElem.innerHTML = '<path d=\"M5,5 C5,45 45,45 45,5\" />';\n    return svgElem;\n}\n\n/**\n * Test if the getTotalLength() function is supported\n */\nfunction isGetTotalLengthSupported() {\n    try {\n        var svgElem = createSimpleSVGWithPath();\n        svgElem.children[0].getTotalLength();\n        return true;\n    } catch (err) {\n        // getTotalLength() API is not supported\n    }\n    return false;\n}\n\n// Means it is an older browser\nif (!isGetTotalLengthSupported()) {\nvar svgProto = SVGPathElement.prototype;\n\nsvgProto.getTotalLength = svgProto.getTotalLength || function() {\n    var d = this.getAttribute('d');\n    if (d) {\n        try {\n            var p = path.svgPathProperties(d);\n            return p.getTotalLength();\n        } catch (err) {}\n    }\n    return 0;\n};\n\nsvgProto.getPointAtLength = svgProto.getPointAtLength || function(fractionLength) {\n    var d = this.getAttribute('d');\n    if (d) {\n        try {\n            var p = path.svgPathProperties(d);\n            return p.getPointAtLength(fractionLength);\n        } catch (err) {}\n    }\n    return {x: 0, y: 0};\n};\n\nsvgProto.getTangentAtLength = svgProto.getTangentAtLength || function(fractionLength) {\n    var d = this.getAttribute('d');\n    if (d) {\n        try {\n            var p = path.svgPathProperties(d);\n            return p.getTangentAtLength(fractionLength);\n        } catch (err) {}\n    }\n    return {x: 0, y: 0};\n};\n}","// http://geoexamples.com/path-properties/ Version 0.4.6. Copyright 2018 Roger Veciana i Rovira.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.spp = {})));\n}(this, (function (exports) { 'use strict';\n\n\t//Parses an SVG path into an object.\n\t//Taken from https://github.com/jkroso/parse-svg-path\n\t//Re-written so it can be used with rollup\n\tvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0};\n\tvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;\n\n\tfunction parse(path) {\n\t  var data = [];\n\t\tpath.replace(segment, function(_, command, args){\n\t\t\tvar type = command.toLowerCase();\n\t\t\targs = parseValues(args);\n\n\t\t\t// overloaded moveTo\n\t\t\tif (type === 'm' && args.length > 2) {\n\t\t\t\tdata.push([command].concat(args.splice(0, 2)));\n\t\t\t\ttype = 'l';\n\t\t\t\tcommand = command === 'm' ? 'l' : 'L';\n\t\t\t}\n\n\t\t\twhile (args.length >= 0) {\n\t\t\t\tif (args.length === length[type]) {\n\t\t\t\t\targs.unshift(command);\n\t\t\t\t\treturn data.push(args);\n\t\t\t\t}\n\t\t\t\tif (args.length < length[type]) {\n\t        throw new Error('malformed path data');\n\t      }\n\t\t\t\tdata.push([command].concat(args.splice(0, length[type])));\n\t\t\t}\n\t\t});\n\t  return data;\n\t}\n\n\tvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig;\n\n\tfunction parseValues(args) {\n\t\tvar numbers = args.match(number);\n\t\treturn numbers ? numbers.map(Number) : [];\n\t}\n\n\t//Calculate Bezier curve length and positionAtLength\n\t//Algorithms taken from http://bl.ocks.org/hnakamur/e7efd0602bfc15f66fc5, https://gist.github.com/tunght13488/6744e77c242cc7a94859 and http://stackoverflow.com/questions/11854907/calculate-the-length-of-a-segment-of-a-quadratic-bezier\n\n\tfunction Bezier(ax, ay, bx, by, cx, cy, dx, dy) {\n\t  return new Bezier$1(ax, ay, bx, by, cx, cy, dx, dy);\n\t}\n\n\tfunction Bezier$1(ax, ay, bx, by, cx, cy, dx, dy) {\n\t  this.a = {x:ax, y:ay};\n\t  this.b = {x:bx, y:by};\n\t  this.c = {x:cx, y:cy};\n\t  this.d = {x:dx, y:dy};\n\n\t  if(dx !== null && dx !== undefined && dy !== null && dy !== undefined){\n\t    this.getArcLength = getCubicArcLength;\n\t    this.getPoint = cubicPoint;\n\t    this.getDerivative = cubicDerivative;\n\t  } else {\n\t    this.getArcLength = getQuadraticArcLength;\n\t    this.getPoint = quadraticPoint;\n\t    this.getDerivative = quadraticDerivative;\n\t  }\n\n\t  this.init();\n\t}\n\n\tBezier$1.prototype = {\n\t  constructor: Bezier$1,\n\t  init: function() {\n\t    \n\t    this.length = this.getArcLength([this.a.x, this.b.x, this.c.x, this.d.x],\n\t                                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n\t  },\n\n\t  getTotalLength: function() {\n\t    return this.length;\n\t  },\n\t  getPointAtLength: function(length) {\n\t    var t = t2length(length, this.length, this.getArcLength,\n\t                    [this.a.x, this.b.x, this.c.x, this.d.x],\n\t                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n\n\t    return this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x],\n\t                                    [this.a.y, this.b.y, this.c.y, this.d.y],\n\t                                  t);\n\t  },\n\t  getTangentAtLength: function(length){\n\t    var t = t2length(length, this.length, this.getArcLength,\n\t                    [this.a.x, this.b.x, this.c.x, this.d.x],\n\t                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n\n\t    var derivative = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x],\n\t                    [this.a.y, this.b.y, this.c.y, this.d.y], t);\n\t    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);\n\t    var tangent;\n\t    if (mdl > 0){\n\t      tangent = {x: derivative.x/mdl, y: derivative.y/mdl};\n\t    } else {\n\t      tangent = {x: 0, y: 0};\n\t    }\n\t    return tangent;\n\t  },\n\t  getPropertiesAtLength: function(length){\n\t    var t = t2length(length, this.length, this.getArcLength,\n\t                    [this.a.x, this.b.x, this.c.x, this.d.x],\n\t                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n\n\t    var derivative = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x],\n\t                    [this.a.y, this.b.y, this.c.y, this.d.y], t);\n\t    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);\n\t    var tangent;\n\t    if (mdl > 0){\n\t      tangent = {x: derivative.x/mdl, y: derivative.y/mdl};\n\t    } else {\n\t      tangent = {x: 0, y: 0};\n\t    }\n\t    var point = this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x],\n\t                                    [this.a.y, this.b.y, this.c.y, this.d.y],\n\t                                  t);\n\t    return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};\n\t  }\n\t};\n\n\tfunction quadraticDerivative(xs, ys, t){\n\t  return {x: (1 - t) * 2*(xs[1] - xs[0]) +t * 2*(xs[2] - xs[1]),\n\t    y: (1 - t) * 2*(ys[1] - ys[0]) +t * 2*(ys[2] - ys[1])\n\t  };\n\t}\n\n\tfunction cubicDerivative(xs, ys, t){\n\t  var derivative = quadraticPoint(\n\t            [3*(xs[1] - xs[0]), 3*(xs[2] - xs[1]), 3*(xs[3] - xs[2])],\n\t            [3*(ys[1] - ys[0]), 3*(ys[2] - ys[1]), 3*(ys[3] - ys[2])],\n\t            t);\n\t  return derivative;\n\t}\n\n\tfunction t2length(length, total_length, func, xs, ys){\n\t  var error = 1;\n\t  var t = length/total_length;\n\t  var step = (length - func(xs, ys, t))/total_length;\n\n\t  while (error > 0.001){\n\t    var increasedTLength = func(xs, ys, t + step);\n\t    var decreasedTLength = func(xs, ys, t - step);\n\t    var increasedTError = Math.abs(length - increasedTLength)/total_length;\n\t    var decreasedTError = Math.abs(length - decreasedTLength)/total_length;\n\t    if (increasedTError < error) {\n\t      error = increasedTError;\n\t      t += step;\n\t    } else if (decreasedTError < error) {\n\t      error = decreasedTError;\n\t      t -= step;\n\t    } else {\n\t      step /= 2;\n\t    }\n\t  }\n\n\t  return t;\n\t}\n\n\tfunction quadraticPoint(xs, ys, t){\n\t  var x = (1 - t) * (1 - t) * xs[0] + 2 * (1 - t) * t * xs[1] + t * t * xs[2];\n\t  var y = (1 - t) * (1 - t) * ys[0] + 2 * (1 - t) * t * ys[1] + t * t * ys[2];\n\t  return {x: x, y: y};\n\t}\n\n\tfunction cubicPoint(xs, ys, t){\n\t  var x = (1 - t) * (1 - t) * (1 - t) * xs[0] + 3 * (1 - t) * (1 - t) * t * xs[1] +\n\t  3 * (1 - t) * t * t * xs[2] + t * t * t * xs[3];\n\t  var y = (1 - t) * (1 - t) * (1 - t) * ys[0] + 3 * (1 - t) * (1 - t) * t * ys[1] +\n\t  3 * (1 - t) * t * t * ys[2] + t * t * t * ys[3];\n\n\t  return {x: x, y: y};\n\t}\n\n\tfunction getQuadraticArcLength(xs, ys, t) {\n\t  if (t === undefined) {\n\t    t = 1;\n\t  }\n\t   var ax = xs[0] - 2 * xs[1] + xs[2];\n\t   var ay = ys[0] - 2 * ys[1] + ys[2];\n\t   var bx = 2 * xs[1] - 2 * xs[0];\n\t   var by = 2 * ys[1] - 2 * ys[0];\n\n\t   var A = 4 * (ax * ax + ay * ay);\n\t   var B = 4 * (ax * bx + ay * by);\n\t   var C = bx * bx + by * by;\n\n\t   if(A === 0){\n\t     return t * Math.sqrt(Math.pow(xs[2] - xs[0], 2) + Math.pow(ys[2] - ys[0], 2));\n\t   }\n\t   var b = B/(2*A);\n\t   var c = C/A;\n\t   var u = t + b;\n\t   var k = c - b*b;\n\n\t   var uuk = (u*u+k)>0?Math.sqrt(u*u+k):0;\n\t   var bbk = (b*b+k)>0?Math.sqrt(b*b+k):0;\n\t   var term = ((b+Math.sqrt(b*b+k)))!==0?k*Math.log(Math.abs((u+uuk)/(b+bbk))):0;\n\t   \n\t   return (Math.sqrt(A)/2)*(\n\t     u*uuk-b*bbk+\n\t     term\n\t   );\n\n\t}\n\n\t// Legendre-Gauss abscissae (xi values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n\tvar tValues = [\n\t  [],\n\t  [],\n\t  [-0.5773502691896257645091487805019574556476,0.5773502691896257645091487805019574556476],\n\t  [0,-0.7745966692414833770358530799564799221665,0.7745966692414833770358530799564799221665],\n\t  [-0.3399810435848562648026657591032446872005,0.3399810435848562648026657591032446872005,-0.8611363115940525752239464888928095050957,0.8611363115940525752239464888928095050957],\n\t  [0,-0.5384693101056830910363144207002088049672,0.5384693101056830910363144207002088049672,-0.9061798459386639927976268782993929651256,0.9061798459386639927976268782993929651256],\n\t  [0.6612093864662645136613995950199053470064,-0.6612093864662645136613995950199053470064,-0.2386191860831969086305017216807119354186,0.2386191860831969086305017216807119354186,-0.9324695142031520278123015544939946091347,0.9324695142031520278123015544939946091347],\n\t  [0, 0.4058451513773971669066064120769614633473,-0.4058451513773971669066064120769614633473,-0.7415311855993944398638647732807884070741,0.7415311855993944398638647732807884070741,-0.9491079123427585245261896840478512624007,0.9491079123427585245261896840478512624007],\n\t  [-0.1834346424956498049394761423601839806667,0.1834346424956498049394761423601839806667,-0.5255324099163289858177390491892463490419,0.5255324099163289858177390491892463490419,-0.7966664774136267395915539364758304368371,0.7966664774136267395915539364758304368371,-0.9602898564975362316835608685694729904282,0.9602898564975362316835608685694729904282],\n\t  [0,-0.8360311073266357942994297880697348765441,0.8360311073266357942994297880697348765441,-0.9681602395076260898355762029036728700494,0.9681602395076260898355762029036728700494,-0.3242534234038089290385380146433366085719,0.3242534234038089290385380146433366085719,-0.6133714327005903973087020393414741847857,0.6133714327005903973087020393414741847857],\n\t  [-0.1488743389816312108848260011297199846175,0.1488743389816312108848260011297199846175,-0.4333953941292471907992659431657841622000,0.4333953941292471907992659431657841622000,-0.6794095682990244062343273651148735757692,0.6794095682990244062343273651148735757692,-0.8650633666889845107320966884234930485275,0.8650633666889845107320966884234930485275,-0.9739065285171717200779640120844520534282,0.9739065285171717200779640120844520534282],\n\t  [0,-0.2695431559523449723315319854008615246796,0.2695431559523449723315319854008615246796,-0.5190961292068118159257256694586095544802,0.5190961292068118159257256694586095544802,-0.7301520055740493240934162520311534580496,0.7301520055740493240934162520311534580496,-0.8870625997680952990751577693039272666316,0.8870625997680952990751577693039272666316,-0.9782286581460569928039380011228573907714,0.9782286581460569928039380011228573907714],\n\t  [-0.1252334085114689154724413694638531299833,0.1252334085114689154724413694638531299833,-0.3678314989981801937526915366437175612563,0.3678314989981801937526915366437175612563,-0.5873179542866174472967024189405342803690,0.5873179542866174472967024189405342803690,-0.7699026741943046870368938332128180759849,0.7699026741943046870368938332128180759849,-0.9041172563704748566784658661190961925375,0.9041172563704748566784658661190961925375,-0.9815606342467192506905490901492808229601,0.9815606342467192506905490901492808229601],\n\t  [0,-0.2304583159551347940655281210979888352115,0.2304583159551347940655281210979888352115,-0.4484927510364468528779128521276398678019,0.4484927510364468528779128521276398678019,-0.6423493394403402206439846069955156500716,0.6423493394403402206439846069955156500716,-0.8015780907333099127942064895828598903056,0.8015780907333099127942064895828598903056,-0.9175983992229779652065478365007195123904,0.9175983992229779652065478365007195123904,-0.9841830547185881494728294488071096110649,0.9841830547185881494728294488071096110649],\n\t  [-0.1080549487073436620662446502198347476119,0.1080549487073436620662446502198347476119,-0.3191123689278897604356718241684754668342,0.3191123689278897604356718241684754668342,-0.5152486363581540919652907185511886623088,0.5152486363581540919652907185511886623088,-0.6872929048116854701480198030193341375384,0.6872929048116854701480198030193341375384,-0.8272013150697649931897947426503949610397,0.8272013150697649931897947426503949610397,-0.9284348836635735173363911393778742644770,0.9284348836635735173363911393778742644770,-0.9862838086968123388415972667040528016760,0.9862838086968123388415972667040528016760],\n\t  [0,-0.2011940939974345223006283033945962078128,0.2011940939974345223006283033945962078128,-0.3941513470775633698972073709810454683627,0.3941513470775633698972073709810454683627,-0.5709721726085388475372267372539106412383,0.5709721726085388475372267372539106412383,-0.7244177313601700474161860546139380096308,0.7244177313601700474161860546139380096308,-0.8482065834104272162006483207742168513662,0.8482065834104272162006483207742168513662,-0.9372733924007059043077589477102094712439,0.9372733924007059043077589477102094712439,-0.9879925180204854284895657185866125811469,0.9879925180204854284895657185866125811469],\n\t  [-0.0950125098376374401853193354249580631303,0.0950125098376374401853193354249580631303,-0.2816035507792589132304605014604961064860,0.2816035507792589132304605014604961064860,-0.4580167776572273863424194429835775735400,0.4580167776572273863424194429835775735400,-0.6178762444026437484466717640487910189918,0.6178762444026437484466717640487910189918,-0.7554044083550030338951011948474422683538,0.7554044083550030338951011948474422683538,-0.8656312023878317438804678977123931323873,0.8656312023878317438804678977123931323873,-0.9445750230732325760779884155346083450911,0.9445750230732325760779884155346083450911,-0.9894009349916499325961541734503326274262,0.9894009349916499325961541734503326274262],\n\t  [0,-0.1784841814958478558506774936540655574754,0.1784841814958478558506774936540655574754,-0.3512317634538763152971855170953460050405,0.3512317634538763152971855170953460050405,-0.5126905370864769678862465686295518745829,0.5126905370864769678862465686295518745829,-0.6576711592166907658503022166430023351478,0.6576711592166907658503022166430023351478,-0.7815140038968014069252300555204760502239,0.7815140038968014069252300555204760502239,-0.8802391537269859021229556944881556926234,0.8802391537269859021229556944881556926234,-0.9506755217687677612227169578958030214433,0.9506755217687677612227169578958030214433,-0.9905754753144173356754340199406652765077,0.9905754753144173356754340199406652765077],\n\t  [-0.0847750130417353012422618529357838117333,0.0847750130417353012422618529357838117333,-0.2518862256915055095889728548779112301628,0.2518862256915055095889728548779112301628,-0.4117511614628426460359317938330516370789,0.4117511614628426460359317938330516370789,-0.5597708310739475346078715485253291369276,0.5597708310739475346078715485253291369276,-0.6916870430603532078748910812888483894522,0.6916870430603532078748910812888483894522,-0.8037049589725231156824174550145907971032,0.8037049589725231156824174550145907971032,-0.8926024664975557392060605911271455154078,0.8926024664975557392060605911271455154078,-0.9558239495713977551811958929297763099728,0.9558239495713977551811958929297763099728,-0.9915651684209309467300160047061507702525,0.9915651684209309467300160047061507702525],\n\t  [0,-0.1603586456402253758680961157407435495048,0.1603586456402253758680961157407435495048,-0.3165640999636298319901173288498449178922,0.3165640999636298319901173288498449178922,-0.4645707413759609457172671481041023679762,0.4645707413759609457172671481041023679762,-0.6005453046616810234696381649462392798683,0.6005453046616810234696381649462392798683,-0.7209661773352293786170958608237816296571,0.7209661773352293786170958608237816296571,-0.8227146565371428249789224867127139017745,0.8227146565371428249789224867127139017745,-0.9031559036148179016426609285323124878093,0.9031559036148179016426609285323124878093,-0.9602081521348300308527788406876515266150,0.9602081521348300308527788406876515266150,-0.9924068438435844031890176702532604935893,0.9924068438435844031890176702532604935893],\n\t  [-0.0765265211334973337546404093988382110047,0.0765265211334973337546404093988382110047,-0.2277858511416450780804961953685746247430,0.2277858511416450780804961953685746247430,-0.3737060887154195606725481770249272373957,0.3737060887154195606725481770249272373957,-0.5108670019508270980043640509552509984254,0.5108670019508270980043640509552509984254,-0.6360536807265150254528366962262859367433,0.6360536807265150254528366962262859367433,-0.7463319064601507926143050703556415903107,0.7463319064601507926143050703556415903107,-0.8391169718222188233945290617015206853296,0.8391169718222188233945290617015206853296,-0.9122344282513259058677524412032981130491,0.9122344282513259058677524412032981130491,-0.9639719272779137912676661311972772219120,0.9639719272779137912676661311972772219120,-0.9931285991850949247861223884713202782226,0.9931285991850949247861223884713202782226],\n\t  [0,-0.1455618541608950909370309823386863301163,0.1455618541608950909370309823386863301163,-0.2880213168024010966007925160646003199090,0.2880213168024010966007925160646003199090,-0.4243421202074387835736688885437880520964,0.4243421202074387835736688885437880520964,-0.5516188358872198070590187967243132866220,0.5516188358872198070590187967243132866220,-0.6671388041974123193059666699903391625970,0.6671388041974123193059666699903391625970,-0.7684399634756779086158778513062280348209,0.7684399634756779086158778513062280348209,-0.8533633645833172836472506385875676702761,0.8533633645833172836472506385875676702761,-0.9200993341504008287901871337149688941591,0.9200993341504008287901871337149688941591,-0.9672268385663062943166222149076951614246,0.9672268385663062943166222149076951614246,-0.9937521706203895002602420359379409291933,0.9937521706203895002602420359379409291933],\n\t  [-0.0697392733197222212138417961186280818222,0.0697392733197222212138417961186280818222,-0.2078604266882212854788465339195457342156,0.2078604266882212854788465339195457342156,-0.3419358208920842251581474204273796195591,0.3419358208920842251581474204273796195591,-0.4693558379867570264063307109664063460953,0.4693558379867570264063307109664063460953,-0.5876404035069115929588769276386473488776,0.5876404035069115929588769276386473488776,-0.6944872631866827800506898357622567712673,0.6944872631866827800506898357622567712673,-0.7878168059792081620042779554083515213881,0.7878168059792081620042779554083515213881,-0.8658125777203001365364256370193787290847,0.8658125777203001365364256370193787290847,-0.9269567721871740005206929392590531966353,0.9269567721871740005206929392590531966353,-0.9700604978354287271239509867652687108059,0.9700604978354287271239509867652687108059,-0.9942945854823992920730314211612989803930,0.9942945854823992920730314211612989803930],\n\t  [0,-0.1332568242984661109317426822417661370104,0.1332568242984661109317426822417661370104,-0.2641356809703449305338695382833096029790,0.2641356809703449305338695382833096029790,-0.3903010380302908314214888728806054585780,0.3903010380302908314214888728806054585780,-0.5095014778460075496897930478668464305448,0.5095014778460075496897930478668464305448,-0.6196098757636461563850973116495956533871,0.6196098757636461563850973116495956533871,-0.7186613631319501944616244837486188483299,0.7186613631319501944616244837486188483299,-0.8048884016188398921511184069967785579414,0.8048884016188398921511184069967785579414,-0.8767523582704416673781568859341456716389,0.8767523582704416673781568859341456716389,-0.9329710868260161023491969890384229782357,0.9329710868260161023491969890384229782357,-0.9725424712181152319560240768207773751816,0.9725424712181152319560240768207773751816,-0.9947693349975521235239257154455743605736,0.9947693349975521235239257154455743605736],\n\t  [-0.0640568928626056260850430826247450385909,0.0640568928626056260850430826247450385909,-0.1911188674736163091586398207570696318404,0.1911188674736163091586398207570696318404,-0.3150426796961633743867932913198102407864,0.3150426796961633743867932913198102407864,-0.4337935076260451384870842319133497124524,0.4337935076260451384870842319133497124524,-0.5454214713888395356583756172183723700107,0.5454214713888395356583756172183723700107,-0.6480936519369755692524957869107476266696,0.6480936519369755692524957869107476266696,-0.7401241915785543642438281030999784255232,0.7401241915785543642438281030999784255232,-0.8200019859739029219539498726697452080761,0.8200019859739029219539498726697452080761,-0.8864155270044010342131543419821967550873,0.8864155270044010342131543419821967550873,-0.9382745520027327585236490017087214496548,0.9382745520027327585236490017087214496548,-0.9747285559713094981983919930081690617411,0.9747285559713094981983919930081690617411,-0.9951872199970213601799974097007368118745,0.9951872199970213601799974097007368118745]\n\t];\n\n\t// Legendre-Gauss weights (wi values, defined by a function linked to in the Bezier primer article)\n\tvar cValues = [\n\t  [],[],\n\t  [1.0,1.0],\n\t  [0.8888888888888888888888888888888888888888,0.5555555555555555555555555555555555555555,0.5555555555555555555555555555555555555555],\n\t  [0.6521451548625461426269360507780005927646,0.6521451548625461426269360507780005927646,0.3478548451374538573730639492219994072353,0.3478548451374538573730639492219994072353],\n\t  [0.5688888888888888888888888888888888888888,0.4786286704993664680412915148356381929122,0.4786286704993664680412915148356381929122,0.2369268850561890875142640407199173626432,0.2369268850561890875142640407199173626432],\n\t  [0.3607615730481386075698335138377161116615,0.3607615730481386075698335138377161116615,0.4679139345726910473898703439895509948116,0.4679139345726910473898703439895509948116,0.1713244923791703450402961421727328935268,0.1713244923791703450402961421727328935268],\n\t  [0.4179591836734693877551020408163265306122,0.3818300505051189449503697754889751338783,0.3818300505051189449503697754889751338783,0.2797053914892766679014677714237795824869,0.2797053914892766679014677714237795824869,0.1294849661688696932706114326790820183285,0.1294849661688696932706114326790820183285],\n\t  [0.3626837833783619829651504492771956121941,0.3626837833783619829651504492771956121941,0.3137066458778872873379622019866013132603,0.3137066458778872873379622019866013132603,0.2223810344533744705443559944262408844301,0.2223810344533744705443559944262408844301,0.1012285362903762591525313543099621901153,0.1012285362903762591525313543099621901153],\n\t  [0.3302393550012597631645250692869740488788,0.1806481606948574040584720312429128095143,0.1806481606948574040584720312429128095143,0.0812743883615744119718921581105236506756,0.0812743883615744119718921581105236506756,0.3123470770400028400686304065844436655987,0.3123470770400028400686304065844436655987,0.2606106964029354623187428694186328497718,0.2606106964029354623187428694186328497718],\n\t  [0.2955242247147528701738929946513383294210,0.2955242247147528701738929946513383294210,0.2692667193099963550912269215694693528597,0.2692667193099963550912269215694693528597,0.2190863625159820439955349342281631924587,0.2190863625159820439955349342281631924587,0.1494513491505805931457763396576973324025,0.1494513491505805931457763396576973324025,0.0666713443086881375935688098933317928578,0.0666713443086881375935688098933317928578],\n\t  [0.2729250867779006307144835283363421891560,0.2628045445102466621806888698905091953727,0.2628045445102466621806888698905091953727,0.2331937645919904799185237048431751394317,0.2331937645919904799185237048431751394317,0.1862902109277342514260976414316558916912,0.1862902109277342514260976414316558916912,0.1255803694649046246346942992239401001976,0.1255803694649046246346942992239401001976,0.0556685671161736664827537204425485787285,0.0556685671161736664827537204425485787285],\n\t  [0.2491470458134027850005624360429512108304,0.2491470458134027850005624360429512108304,0.2334925365383548087608498989248780562594,0.2334925365383548087608498989248780562594,0.2031674267230659217490644558097983765065,0.2031674267230659217490644558097983765065,0.1600783285433462263346525295433590718720,0.1600783285433462263346525295433590718720,0.1069393259953184309602547181939962242145,0.1069393259953184309602547181939962242145,0.0471753363865118271946159614850170603170,0.0471753363865118271946159614850170603170],\n\tn\tn\tn\tn\tn\tn\t  [0.1610544498487836959791636253209167350399,0.1589688433939543476499564394650472016787,0.1589688433939543476499564394650472016787,0.1527660420658596667788554008976629984610,0.1527660420658596667788554008976629984610,0.1426067021736066117757461094419029724756,0.1426067021736066117757461094419029724756,0.1287539625393362276755157848568771170558,0.1287539625393362276755157848568771170558,0.1115666455473339947160239016817659974813,0.1115666455473339947160239016817659974813,0.0914900216224499994644620941238396526609,0.0914900216224499994644620941238396526609,0.0690445427376412265807082580060130449618,0.0690445427376412265807082580060130449618,0.0448142267656996003328381574019942119517,0.0448142267656996003328381574019942119517,0.0194617882297264770363120414644384357529,0.0194617882297264770363120414644384357529],\n\t  [0.1527533871307258506980843319550975934919,0.1527533871307258506980843319550975934919,0.1491729864726037467878287370019694366926,0.1491729864726037467878287370019694366926,0.1420961093183820513292983250671649330345,0.1420961093183820513292983250671649330345,0.1316886384491766268984944997481631349161,0.1316886384491766268984944997481631349161,0.1181945319615184173123773777113822870050,0.1181945319615184173123773777113822870050,0.1019301198172404350367501354803498761666,0.1019301198172404350367501354803498761666,0.0832767415767047487247581432220462061001,0.0832767415767047487247581432220462061001,0.0626720483341090635695065351870416063516,0.0626720483341090635695065351870416063516,0.0406014298003869413310399522749321098790,0.0406014298003869413310399522749321098790,0.0176140071391521183118619623518528163621,0.0176140071391521183118619623518528163621],\n\t  [0.1460811336496904271919851476833711882448,0.1445244039899700590638271665537525436099,0.1445244039899700590638271665537525436099,0.1398873947910731547221334238675831108927,0.1398873947910731547221334238675831108927,0.1322689386333374617810525744967756043290,0.1322689386333374617810525744967756043290,0.1218314160537285341953671771257335983563,0.1218314160537285341953671771257335983563,0.1087972991671483776634745780701056420336,0.1087972991671483776634745780701056420336,0.0934444234560338615532897411139320884835,0.0934444234560338615532897411139320884835,0.0761001136283793020170516533001831792261,0.0761001136283793020170516533001831792261,0.0571344254268572082836358264724479574912,0.0571344254268572082836358264724479574912,0.0369537897708524937999506682993296661889,0.0369537897708524937999506682993296661889,0.0160172282577743333242246168584710152658,0.0160172282577743333242246168584710152658],\n\tn\t  [0.1336545721861061753514571105458443385831,0.1324620394046966173716424647033169258050,0.1324620394046966173716424647033169258050,0.1289057221880821499785953393997936532597,0.1289057221880821499785953393997936532597,0.1230490843067295304675784006720096548158,0.1230490843067295304675784006720096548158,0.1149966402224113649416435129339613014914,0.1149966402224113649416435129339613014914,0.1048920914645414100740861850147438548584,0.1048920914645414100740861850147438548584,0.0929157660600351474770186173697646486034,0.0929157660600351474770186173697646486034,0.0792814117767189549228925247420432269137,0.0792814117767189549228925247420432269137,0.0642324214085258521271696151589109980391,0.0642324214085258521271696151589109980391,0.0480376717310846685716410716320339965612,0.0480376717310846685716410716320339965612,0.0309880058569794443106942196418845053837,0.0309880058569794443106942196418845053837,0.0134118594871417720813094934586150649766,0.0134118594871417720813094934586150649766],\n\t  [0.1279381953467521569740561652246953718517,0.1279381953467521569740561652246953718517,0.1258374563468282961213753825111836887264,0.1258374563468282961213753825111836887264,0.1216704729278033912044631534762624256070,0.1216704729278033912044631534762624256070,0.1155056680537256013533444839067835598622,0.1155056680537256013533444839067835598622,0.1074442701159656347825773424466062227946,0.1074442701159656347825773424466062227946,0.0976186521041138882698806644642471544279,0.0976186521041138882698806644642471544279,0.0861901615319532759171852029837426671850,0.0861901615319532759171852029837426671850,0.0733464814110803057340336152531165181193,0.0733464814110803057340336152531165181193,0.0592985849154367807463677585001085845412,0.0592985849154367807463677585001085845412,0.0442774388174198061686027482113382288593,0.0442774388174198061686027482113382288593,0.0285313886289336631813078159518782864491,0.0285313886289336631813078159518782864491,0.0123412297999871995468056670700372915759,0.0123412297999871995468056670700372915759]\n\t];\n\n\t// LUT for binomial coefficient arrays per curve order 'n'\n\tvar binomialCoefficients = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]];\n\n\t// Look up what the binomial coefficient is for pair {n,k}\n\tfunction binomials(n, k) {\n\t  return binomialCoefficients[n][k];\n\t}\n\n\t/**\n\t * Compute the curve derivative (hodograph) at t.\n\t */\n\tfunction getDerivative(derivative, t, vs) {\n\t  // the derivative of any 't'-less function is zero.\n\t  var n = vs.length - 1,\n\t      _vs,\n\t      value,\n\t      k;\n\t  if (n === 0) {\n\t    return 0;\n\t  }\n\n\t  // direct values? compute!\n\t  if (derivative === 0) {\n\t    value = 0;\n\t    for (k = 0; k <= n; k++) {\n\t      value += binomials(n, k) * Math.pow(1 - t, n - k) * Math.pow(t, k) * vs[k];\n\t    }\n\t    return value;\n\t  } else {\n\t    // Still some derivative? go down one order, then try\n\t    // for the lower order curve's.\n\t    _vs = new Array(n);\n\t    for (k = 0; k < n; k++) {\n\t      _vs[k] = n * (vs[k + 1] - vs[k]);\n\t    }\n\t    return getDerivative(derivative - 1, t, _vs);\n\t  }\n\t}\n\n\tfunction B(xs, ys, t) {\n\t  var xbase = getDerivative(1, t, xs);\n\t  var ybase = getDerivative(1, t, ys);\n\t  var combined = xbase * xbase + ybase * ybase;\n\t  return Math.sqrt(combined);\n\t}\n\n\tfunction getCubicArcLength(xs, ys, t) {\n\t  var z, sum, i, correctedT;\n\n\t  /*if (xs.length >= tValues.length) {\n\t    throw new Error('too high n bezier');\n\t  }*/\n\n\t  if (t === undefined) {\n\t    t = 1;\n\t  }\n\t  var n = 20;\n\n\t  z = t / 2;\n\t  sum = 0;\n\t  for (i = 0; i < n; i++) {\n\t    correctedT = z * tValues[n][i] + z;\n\t    sum += cValues[n][i] * B(xs, ys, correctedT);\n\t  }\n\t  return z * sum;\n\t}\n\n\t//Calculate ans Arc curve length and positionAtLength\n\t//The point in ellipse functions have been taken from https://github.com/MadLittleMods/svg-curve-lib/tree/f07d6008a673816f4cb74a3269164b430c3a95cb\n\n\tfunction Arc(x0, y0, rx,ry, xAxisRotate, LargeArcFlag,SweepFlag, x,y) {\n\t  return new Arc$1(x0, y0, rx,ry, xAxisRotate, LargeArcFlag,SweepFlag, x,y);\n\t}\n\n\tfunction Arc$1(x0, y0,rx,ry, xAxisRotate, LargeArcFlag, SweepFlag,x1,y1) {\n\t  this.x0 = x0;\n\t  this.y0 = y0;\n\t  this.rx = rx;\n\t  this.ry = ry;\n\t  this.xAxisRotate = xAxisRotate;\n\t  this.LargeArcFlag = LargeArcFlag;\n\t  this.SweepFlag = SweepFlag;\n\t  this.x1 = x1;\n\t  this.y1 = y1;\n\n\t  var lengthProperties = approximateArcLengthOfCurve(300, function(t) {\n\t    return pointOnEllipticalArc({x: x0, y:y0}, rx, ry, xAxisRotate,\n\t                                 LargeArcFlag, SweepFlag, {x: x1, y:y1}, t);\n\t  });\n\n\t  this.length = lengthProperties.arcLength;\n\t}\n\n\tArc$1.prototype = {\n\t  constructor: Arc$1,\n\t  init: function() {\n\n\t    \n\t  },\n\n\t  getTotalLength: function() {\n\t    return this.length;\n\t  },\n\t  getPointAtLength: function(fractionLength) {\n\t    \n\t    if(fractionLength < 0){\n\t      fractionLength = 0;\n\t    } else if(fractionLength > this.length){\n\t      fractionLength = this.length;\n\t    }\n\t    \n\t    var position = pointOnEllipticalArc({x: this.x0, y:this.y0}, \n\t      this.rx, this.ry, this.xAxisRotate,\n\t      this.LargeArcFlag, this.SweepFlag,\n\t      {x: this.x1, y: this.y1},\n\t      fractionLength/this.length);\n\t     \n\t    return {x: position.x, y: position.y};\n\n\t  },\n\t  getTangentAtLength: function(fractionLength) {\n\t    if(fractionLength < 0){\n\t        fractionLength = 0;\n\t        } else if(fractionLength > this.length){\n\t        fractionLength = this.length;\n\t        }\n\t        var position = pointOnEllipticalArc({x: this.x0, y:this.y0}, \n\t          this.rx, this.ry, this.xAxisRotate,\n\t          this.LargeArcFlag, this.SweepFlag,\n\t          {x: this.x1, y: this.y1},\n\t          fractionLength/this.length);\n\t    \n\t        return {x: position.x, y: position.y};\n\t        \n\t  },\n\t  getPropertiesAtLength: function(fractionLength){\n\t    var tangent = this.getTangentAtLength(fractionLength);\n\t    var point = this.getPointAtLength(fractionLength);\n\t    return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};\n\t  }\n\t};\n\n\tfunction pointOnEllipticalArc(p0, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p1, t) {\n\n\t  // In accordance to: http://www.w3.org/TR/SVG/implnote.html#ArcOutOfRangeParameters\n\t  rx = Math.abs(rx);\n\t  ry = Math.abs(ry);\n\t  xAxisRotation = mod(xAxisRotation, 360);\n\t  var xAxisRotationRadians = toRadians(xAxisRotation);\n\t  // If the endpoints are identical, then this is equivalent to omitting the elliptical arc segment entirely.\n\t  if(p0.x === p1.x && p0.y === p1.y) {\n\t    return p0;\n\t  }\n\t  \n\t  // If rx = 0 or ry = 0 then this arc is treated as a straight line segment joining the endpoints.    \n\t  if(rx === 0 || ry === 0) {\n\t    return this.pointOnLine(p0, p1, t);\n\t  }\n\n\t  \n\t  // Following \"Conversion from endpoint to center parameterization\"\n\t  // http://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n\t  \n\t  // Step #1: Compute transformedPoint\n\t  var dx = (p0.x-p1.x)/2;\n\t  var dy = (p0.y-p1.y)/2;\n\t  var transformedPoint = {\n\t    x: Math.cos(xAxisRotationRadians)*dx + Math.sin(xAxisRotationRadians)*dy,\n\t    y: -Math.sin(xAxisRotationRadians)*dx + Math.cos(xAxisRotationRadians)*dy\n\t  };\n\t  // Ensure radii are large enough\n\t  var radiiCheck = Math.pow(transformedPoint.x, 2)/Math.pow(rx, 2) + Math.pow(transformedPoint.y, 2)/Math.pow(ry, 2);\n\t  if(radiiCheck > 1) {\n\t    rx = Math.sqrt(radiiCheck)*rx;\n\t    ry = Math.sqrt(radiiCheck)*ry;\n\t  }\n\n\t  // Step #2: Compute transformedCenter\n\t  var cSquareNumerator = Math.pow(rx, 2)*Math.pow(ry, 2) - Math.pow(rx, 2)*Math.pow(transformedPoint.y, 2) - Math.pow(ry, 2)*Math.pow(transformedPoint.x, 2);\n\t  var cSquareRootDenom = Math.pow(rx, 2)*Math.pow(transformedPoint.y, 2) + Math.pow(ry, 2)*Math.pow(transformedPoint.x, 2);\n\t  var cRadicand = cSquareNumerator/cSquareRootDenom;\n\t  // Make sure this never drops below zero because of precision\n\t  cRadicand = cRadicand < 0 ? 0 : cRadicand;\n\t  var cCoef = (largeArcFlag !== sweepFlag ? 1 : -1) * Math.sqrt(cRadicand);\n\t  var transformedCenter = {\n\t    x: cCoef*((rx*transformedPoint.y)/ry),\n\t    y: cCoef*(-(ry*transformedPoint.x)/rx)\n\t  };\n\n\t  // Step #3: Compute center\n\t  var center = {\n\t    x: Math.cos(xAxisRotationRadians)*transformedCenter.x - Math.sin(xAxisRotationRadians)*transformedCenter.y + ((p0.x+p1.x)/2),\n\t    y: Math.sin(xAxisRotationRadians)*transformedCenter.x + Math.cos(xAxisRotationRadians)*transformedCenter.y + ((p0.y+p1.y)/2)\n\t  };\n\n\t  \n\t  // Step #4: Compute start/sweep angles\n\t  // Start angle of the elliptical arc prior to the stretch and rotate operations.\n\t  // Difference between the start and end angles\n\t  var startVector = {\n\t    x: (transformedPoint.x-transformedCenter.x)/rx,\n\t    y: (transformedPoint.y-transformedCenter.y)/ry\n\t  };\n\t  var startAngle = angleBetween({\n\t    x: 1,\n\t    y: 0\n\t  }, startVector);\n\t  \n\t  var endVector = {\n\t    x: (-transformedPoint.x-transformedCenter.x)/rx,\n\t    y: (-transformedPoint.y-transformedCenter.y)/ry\n\t  };\n\t  var sweepAngle = angleBetween(startVector, endVector);\n\t  \n\t  if(!sweepFlag && sweepAngle > 0) {\n\t    sweepAngle -= 2*Math.PI;\n\t  }\n\t  else if(sweepFlag && sweepAngle < 0) {\n\t    sweepAngle += 2*Math.PI;\n\t  }\n\t  // We use % instead of `mod(..)` because we want it to be -360deg to 360deg(but actually in radians)\n\t  sweepAngle %= 2*Math.PI;\n\t  \n\t  // From http://www.w3.org/TR/SVG/implnote.html#ArcParameterizationAlternatives\n\t  var angle = startAngle+(sweepAngle*t);\n\t  var ellipseComponentX = rx*Math.cos(angle);\n\t  var ellipseComponentY = ry*Math.sin(angle);\n\t  \n\t  var point = {\n\t    x: Math.cos(xAxisRotationRadians)*ellipseComponentX - Math.sin(xAxisRotationRadians)*ellipseComponentY + center.x,\n\t    y: Math.sin(xAxisRotationRadians)*ellipseComponentX + Math.cos(xAxisRotationRadians)*ellipseComponentY + center.y\n\t  };\n\n\t  // Attach some extra info to use\n\t  point.ellipticalArcStartAngle = startAngle;\n\t  point.ellipticalArcEndAngle = startAngle+sweepAngle;\n\t  point.ellipticalArcAngle = angle;\n\n\t  point.ellipticalArcCenter = center;\n\t  point.resultantRx = rx;\n\t  point.resultantRy = ry;\n\n\t  \n\n\t  return point;\n\t}\n\n\tfunction approximateArcLengthOfCurve(resolution, pointOnCurveFunc) {\n\t  // Resolution is the number of segments we use\n\t  resolution = resolution ? resolution : 500;\n\t  \n\t  var resultantArcLength = 0;\n\t  var arcLengthMap = [];\n\t  var approximationLines = [];\n\n\t  var prevPoint = pointOnCurveFunc(0);\n\t  var nextPoint;\n\t  for(var i = 0; i < resolution; i++) {\n\t    var t = clamp(i*(1/resolution), 0, 1);\n\t    nextPoint = pointOnCurveFunc(t);\n\t    resultantArcLength += distance(prevPoint, nextPoint);\n\t    approximationLines.push([prevPoint, nextPoint]);\n\n\t    arcLengthMap.push({\n\t      t: t,\n\t      arcLength: resultantArcLength\n\t    });\n\t    \n\t    prevPoint = nextPoint;\n\t  }\n\t  // Last stretch to the endpoint\n\t  nextPoint = pointOnCurveFunc(1);\n\t  approximationLines.push([prevPoint, nextPoint]);\n\t  resultantArcLength += distance(prevPoint, nextPoint);\n\t  arcLengthMap.push({\n\t    t: 1,\n\t    arcLength: resultantArcLength\n\t  });\n\n\t  return {\n\t    arcLength: resultantArcLength,\n\t    arcLengthMap: arcLengthMap,\n\t    approximationLines: approximationLines\n\t  };\n\t}\n\n\tfunction mod(x, m) {\n\t  return (x%m + m)%m;\n\t}\n\n\tfunction toRadians(angle) {\n\t  return angle * (Math.PI / 180);\n\t}\n\n\tfunction distance(p0, p1) {\n\t  return Math.sqrt(Math.pow(p1.x-p0.x, 2) + Math.pow(p1.y-p0.y, 2));\n\t}\n\n\tfunction clamp(val, min, max) {\n\t  return Math.min(Math.max(val, min), max);\n\t}\n\n\n\tfunction angleBetween(v0, v1) {\n\t  var p = v0.x*v1.x + v0.y*v1.y;\n\t  var n = Math.sqrt((Math.pow(v0.x, 2)+Math.pow(v0.y, 2)) * (Math.pow(v1.x, 2)+Math.pow(v1.y, 2)));\n\t  var sign = v0.x*v1.y - v0.y*v1.x < 0 ? -1 : 1;\n\t  var angle = sign*Math.acos(p/n);\n\t  \n\t  //var angle = Math.atan2(v0.y, v0.x) - Math.atan2(v1.y,  v1.x);\n\t  \n\t  return angle;\n\t}\n\n\tfunction LinearPosition(x0, x1, y0, y1) {\n\t  return new LinearPosition$1(x0, x1, y0, y1);\n\n\t}\n\n\tfunction LinearPosition$1(x0, x1, y0, y1){\n\t  this.x0 = x0;\n\t  this.x1 = x1;\n\t  this.y0 = y0;\n\t  this.y1 = y1;\n\t}\n\n\tLinearPosition$1.prototype.getTotalLength = function(){\n\t  return Math.sqrt(Math.pow(this.x0 - this.x1, 2) +\n\t         Math.pow(this.y0 - this.y1, 2));\n\t};\n\n\tLinearPosition$1.prototype.getPointAtLength = function(pos){\n\t  var fraction = pos/ (Math.sqrt(Math.pow(this.x0 - this.x1, 2) +\n\t         Math.pow(this.y0 - this.y1, 2)));\n\n\t  var newDeltaX = (this.x1 - this.x0)*fraction;\n\t  var newDeltaY = (this.y1 - this.y0)*fraction;\n\t  return { x: this.x0 + newDeltaX, y: this.y0 + newDeltaY };\n\t};\n\tLinearPosition$1.prototype.getTangentAtLength = function(){\n\t  var module = Math.sqrt((this.x1 - this.x0) * (this.x1 - this.x0) +\n\t              (this.y1 - this.y0) * (this.y1 - this.y0));\n\t  return { x: (this.x1 - this.x0)/module, y: (this.y1 - this.y0)/module };\n\t};\n\tLinearPosition$1.prototype.getPropertiesAtLength = function(pos){\n\t  var point = this.getPointAtLength(pos);\n\t  var tangent = this.getTangentAtLength();\n\t  return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};\n\t};\n\n\tfunction pathProperties(svgString) {\n\t  var length = 0;\n\t  var partial_lengths = [];\n\t  var functions = [];\n\n\t  function svgProperties(string){\n\t    if(!string){return null;}\n\t    var parsed = parse(string);\n\t    var cur = [0, 0];\n\t    var prev_point = [0, 0];\n\t    var curve;\n\t    var ringStart;\n\t    for (var i = 0; i < parsed.length; i++){\n\t      //moveTo\n\t      if(parsed[i][0] === \"M\"){\n\t        cur = [parsed[i][1], parsed[i][2]];\n\t        ringStart = [cur[0], cur[1]];\n\t        functions.push(null);\n\t      } else if(parsed[i][0] === \"m\"){\n\t        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[1]];\n\t        ringStart = [cur[0], cur[1]];\n\t        functions.push(null);\n\t      }\n\t      //lineTo\n\t      else if(parsed[i][0] === \"L\"){\n\t        length = length + Math.sqrt(Math.pow(cur[0] - parsed[i][1], 2) + Math.pow(cur[1] - parsed[i][2], 2));\n\t        functions.push(new LinearPosition(cur[0], parsed[i][1], cur[1], parsed[i][2]));\n\t        cur = [parsed[i][1], parsed[i][2]];\n\t      } else if(parsed[i][0] === \"l\"){\n\t        length = length + Math.sqrt(Math.pow(parsed[i][1], 2) + Math.pow(parsed[i][2], 2));\n\t        functions.push(new LinearPosition(cur[0], parsed[i][1] + cur[0], cur[1], parsed[i][2] + cur[1]));\n\t        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[1]];\n\t      } else if(parsed[i][0] === \"H\"){\n\t        length = length + Math.abs(cur[0] - parsed[i][1]);\n\t        functions.push(new LinearPosition(cur[0], parsed[i][1], cur[1], cur[1]));\n\t        cur[0] = parsed[i][1];\n\t      } else if(parsed[i][0] === \"h\"){\n\t        length = length + Math.abs(parsed[i][1]);\n\t        functions.push(new LinearPosition(cur[0], cur[0] + parsed[i][1], cur[1], cur[1]));\n\t        cur[0] = parsed[i][1] + cur[0];\n\t      } else if(parsed[i][0] === \"V\"){\n\t        length = length + Math.abs(cur[1] - parsed[i][1]);\n\t        functions.push(new LinearPosition(cur[0], cur[0], cur[1], parsed[i][1]));\n\t        cur[1] = parsed[i][1];\n\t      } else if(parsed[i][0] === \"v\"){\n\t        length = length + Math.abs(parsed[i][1]);\n\t        functions.push(new LinearPosition(cur[0], cur[0], cur[1], cur[1] + parsed[i][1]));\n\t        cur[1] = parsed[i][1] + cur[1];\n\t      //Close path\n\t      }  else if(parsed[i][0] === \"z\" || parsed[i][0] === \"Z\"){\n\t        length = length + Math.sqrt(Math.pow(ringStart[0] - cur[0], 2) + Math.pow(ringStart[1] - cur[1], 2));\n\t        functions.push(new LinearPosition(cur[0], ringStart[0], cur[1], ringStart[1]));\n\t        cur = [ringStart[0], ringStart[1]];\n\t      }\n\t      //Cubic Bezier curves\n\t      else if(parsed[i][0] === \"C\"){\n\t        curve = new Bezier(cur[0], cur[1] , parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4] , parsed[i][5], parsed[i][6]);\n\t        length = length + curve.getTotalLength();\n\t        cur = [parsed[i][5], parsed[i][6]];\n\t        functions.push(curve);\n\t      } else if(parsed[i][0] === \"c\"){\n\t        curve = new Bezier(cur[0], cur[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4] , cur[0] + parsed[i][5], cur[1] + parsed[i][6]);\n\t        if(curve.getTotalLength() > 0){\n\t          length = length + curve.getTotalLength();\n\t          functions.push(curve);\n\t          cur = [parsed[i][5] + cur[0], parsed[i][6] + cur[1]];\n\t        } else {\n\t          functions.push(new LinearPosition(cur[0], cur[0], cur[1], cur[1]));\n\t        }\n\t      } else if(parsed[i][0] === \"S\"){\n\t        if(i>0 && [\"C\",\"c\",\"S\",\"s\"].indexOf(parsed[i-1][0]) > -1){\n\t          curve = new Bezier(cur[0], cur[1] , 2*cur[0] - parsed[i-1][parsed[i-1].length - 4], 2*cur[1] - parsed[i-1][parsed[i-1].length - 3], parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);\n\t        } else {\n\t          curve = new Bezier(cur[0], cur[1] , cur[0], cur[1], parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);\n\t        }\n\t        length = length + curve.getTotalLength();\n\t        cur = [parsed[i][3], parsed[i][4]];\n\t        functions.push(curve);\n\t      }  else if(parsed[i][0] === \"s\"){ //240 225\n\t        if(i>0 && [\"C\",\"c\",\"S\",\"s\"].indexOf(parsed[i-1][0]) > -1){\n\t          curve = new Bezier(cur[0], cur[1] , cur[0] + curve.d.x - curve.c.x, cur[1] + curve.d.y - curve.c.y, cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);\n\t        } else {\n\t          curve = new Bezier(cur[0], cur[1] , cur[0], cur[1], cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);\n\t        }\n\t        length = length + curve.getTotalLength();\n\t        cur = [parsed[i][3] + cur[0], parsed[i][4] + cur[1]];\n\t        functions.push(curve);\n\t      }\n\t      //Quadratic Bezier curves\n\t      else if(parsed[i][0] === \"Q\"){\n\t        if(cur[0] == parsed[i][1] && cur[1] == parsed[i][2]){\n\t          curve = new LinearPosition(parsed[i][1], parsed[i][3], parsed[i][2], parsed[i][4]);\n\t        } else {\n\t          curve = new Bezier(cur[0], cur[1] , parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);\n\t        }\n\t        length = length + curve.getTotalLength();\n\t        functions.push(curve);\n\t        cur = [parsed[i][3], parsed[i][4]];\n\t        prev_point = [parsed[i][1], parsed[i][2]];\n\n\t      }  else if(parsed[i][0] === \"q\"){\n\t        if(!(parsed[i][1] == 0 && parsed[i][2] == 0)){\n\t          curve = new Bezier(cur[0], cur[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);\n\t        } else {\n\t          curve = new LinearPosition(cur[0] + parsed[i][1], cur[0] + parsed[i][3], cur[1] + parsed[i][2], cur[1] + parsed[i][4]);\n\t        }\n\t        length = length + curve.getTotalLength();\n\t        prev_point = [cur[0] + parsed[i][1], cur[1] + parsed[i][2]];\n\t        cur = [parsed[i][3] + cur[0], parsed[i][4] + cur[1]];\n\t        functions.push(curve);\n\t      } else if(parsed[i][0] === \"T\"){\n\t        if(i>0 && [\"Q\",\"q\",\"T\",\"t\"].indexOf(parsed[i-1][0]) > -1){\n\t          curve = new Bezier(cur[0], cur[1] , 2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1] , parsed[i][1], parsed[i][2]);\n\t        } else {\n\t          curve = new LinearPosition(cur[0], parsed[i][1], cur[1], parsed[i][2]);\n\t        }\n\t        functions.push(curve);\n\t        length = length + curve.getTotalLength();\n\t        prev_point = [2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1]];\n\t        cur = [parsed[i][1], parsed[i][2]];\n\n\t      } else if(parsed[i][0] === \"t\"){\n\t        if(i>0 && [\"Q\",\"q\",\"T\",\"t\"].indexOf(parsed[i-1][0]) > -1){\n\t          curve = new Bezier(cur[0], cur[1] , 2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2]);\n\t        } else {\n\t          curve = new LinearPosition(cur[0], cur[0] + parsed[i][1], cur[1], cur[1] + parsed[i][2]);\n\t        }\n\t        length = length + curve.getTotalLength();\n\t        prev_point = [2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1]];\n\t        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[0]];\n\t        functions.push(curve);\n\t      } else if(parsed[i][0] === \"A\"){\n\t        curve = new Arc(cur[0], cur[1], parsed[i][1], parsed[i][2], parsed[i][3], parsed[i][4], parsed[i][5], parsed[i][6], parsed[i][7]);\n\n\t        length = length + curve.getTotalLength();\n\t        cur = [parsed[i][6], parsed[i][7]];\n\t        functions.push(curve);\n\t      } else if(parsed[i][0] === \"a\"){\n\t        curve = new Arc(cur[0], cur[1], parsed[i][1], parsed[i][2], parsed[i][3], parsed[i][4], parsed[i][5], cur[0] + parsed[i][6], cur[1] + parsed[i][7]);\n\n\t        length = length + curve.getTotalLength();\n\t        cur = [cur[0] + parsed[i][6], cur[1] + parsed[i][7]];\n\t        functions.push(curve);\n\t      }\n\t      partial_lengths.push(length);\n\n\t    }\n\t    return svgProperties;\n\t  }\n\n\t svgProperties.getTotalLength = function(){\n\t    return length;\n\t  };\n\n\t  svgProperties.getPointAtLength = function(fractionLength){\n\t    var fractionPart = getPartAtLength(fractionLength);\n\t    return functions[fractionPart.i].getPointAtLength(fractionPart.fraction);\n\t  };\n\n\t  svgProperties.getTangentAtLength = function(fractionLength){\n\t    var fractionPart = getPartAtLength(fractionLength);\n\t    return functions[fractionPart.i].getTangentAtLength(fractionPart.fraction);\n\t  };\n\n\t  svgProperties.getPropertiesAtLength = function(fractionLength){\n\t    var fractionPart = getPartAtLength(fractionLength);\n\t    return functions[fractionPart.i].getPropertiesAtLength(fractionPart.fraction);\n\t  };\n\n\t  svgProperties.getParts = function(){\n\t    var parts = [];\n\t    for(var i = 0; i< functions.length; i++){\n\t      if(functions[i] != null){\n\t        var properties = {};\n\t        properties['start'] = functions[i].getPointAtLength(0);\n\t        properties['end'] = functions[i].getPointAtLength(partial_lengths[i] - partial_lengths[i-1]);\n\t        properties['length'] = partial_lengths[i] - partial_lengths[i-1];\n\t        (function(func){\n\t          properties['getPointAtLength'] = function(d){return func.getPointAtLength(d);};\n\t          properties['getTangentAtLength'] = function(d){return func.getTangentAtLength(d);};\n\t          properties['getPropertiesAtLength'] = function(d){return func.getPropertiesAtLength(d);};\n\t        })(functions[i]);\n\t        \n\t        parts.push(properties);\n\t      }\n\t    }\n\t  \n\t    return parts;\n\t  };\n\n\t  var getPartAtLength = function(fractionLength){\n\t    if(fractionLength < 0){\n\t      fractionLength = 0;\n\t    } else if(fractionLength > length){\n\t      fractionLength = length;\n\t    }\n\n\t    var i = partial_lengths.length - 1;\n\n\t    while(partial_lengths[i] >= fractionLength && partial_lengths[i] > 0){\n\t      i--;\n\t    }\n\t    i++;\n\t    return {fraction: fractionLength-partial_lengths[i-1], i: i};\n\t  };\n\n\t  return svgProperties(svgString);\n\t}\n\n\texports.svgPathProperties = pathProperties;\n\texports.parse = parse;\n\texports.Bezier = Bezier;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"sourceRoot":""}